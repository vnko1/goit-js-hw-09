{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAa,GAgCnB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAExB,SAAsBC,GACpBA,EAAEC,iBACF,IAAgCC,EAAAF,EAAEG,cAAcC,SAAxCf,EAAwBa,EAAxBb,MAAOgB,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,QAKvB,SAAkBjB,EAAOgB,EAAMC,GAC7BpB,EAAWG,MAAQkB,OAAOlB,EAAMmB,OAChCtB,EAAWmB,KAAOE,OAAOF,EAAKG,OAC9BtB,EAAWoB,OAASC,OAAOD,EAAOE,M,EAPlCC,CAASpB,EAAOgB,EAAMC,GAUxB,WACE,IAAK,IAAII,EAAI,EAAGA,GAAKxB,EAAWoB,OAAQI,GAAK,EAC3CvB,EAAcuB,EAAGxB,EAAWG,OACzBsB,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBL,EAAA6B,OAAOC,QAAQ,qBAAoCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE1D2B,OAAM,SAAAJ,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBL,EAAA6B,OAAOI,QAAQ,oBAAmCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE5DH,EAAWG,OAASH,EAAWmB,I,CAlBjCa,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputValue = {};\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget.elements;\n  getValue(delay, step, amount);\n  loopingFunction();\n}\n\nfunction getValue(delay, step, amount) {\n  inputValue.delay = Number(delay.value);\n  inputValue.step = Number(step.value);\n  inputValue.amount = Number(amount.value);\n}\n\nfunction loopingFunction() {\n  for (let i = 1; i <= inputValue.amount; i += 1) {\n    createPromise(i, inputValue.delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    inputValue.delay += inputValue.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$inputValue","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","step","amount","Number","value","$ce04d3a99e08e73b$var$getValue","i","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$loopingFunction"],"version":3,"file":"03-promises.601f5b9c.js.map"}